<!doctype html>  
<html lang="en">
	
	<head>
		<meta charset="utf-8">

		<title>reveal.js - The HTML Presentation Framework</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Walker Wang">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<link rel="stylesheet" href="/css/reveal.min.css">
		<link rel="stylesheet" href="/css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="/lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', include the PDF print sheet -->
		<script>
			if( window.location.search.match( /print-pdf/gi ) ) {
				var link = document.createElement( 'link' );
				link.rel = 'stylesheet';
				link.type = 'text/css';
				link.href = '/css/print/pdf.css';
				document.getElementsByTagName( 'head' )[0].appendChild( link );
			}
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>
	
	<body>
	
		<%- body %>
	
		<script src="/lib/js/head.min.js"></script>
		<script src="/js/reveal.min.js"></script>

<script>
		// Parse the query string into a key/value object
		// var query = {};

		// location.search.replace( /[A-Z0-9]+?=(\w*)/gi, function(a) {
		// 	query[ a.split( '=' ).shift() ] = a.split( '=' ).pop();
		// } );

		// // Fires when a slide with data-state=customevent is activated
		// Reveal.addEventListener( 'customevent', function() {
		// 	console.log( '"customevent" has fired' );
		// } );

		// // Fires each time a new slide is activated
		// Reveal.addEventListener( 'slidechanged', function( event ) {
		// 	// event.previousSlide, event.currentSlide, event.indexh, event.indexv
		// } );

		// Full list of configuration options available here:
		// https://github.com/hakimel/reveal.js#configuration
		Reveal.initialize({
			controls: true,
			progress: true,
			history: true,
			center: true,

			theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
			transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

			// Parallax scrolling
			// parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
			// parallaxBackgroundSize: '2100px 900px',

			// Optional libraries used to extend on reveal.js
			dependencies: [
				{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
				{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
				{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
				{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
				{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
				{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
				// ,//enable server watch notes use "node plugin/notes-server"
		  //       { src: 'socket.io/socket.io.js', async: true },
		  //       { src: 'plugin/notes-server/client.js', async: true }
			]
		});

	// presentation id
	var presentation_id = 'demo' ; // default to demo presentation
			
	// map the url to the presentation id
	var pathNameArr = window.location.pathname.split("/");
	if(pathNameArr.length > 1)
		presentation_id = pathNameArr[1];

	head.js( '/socket.io/socket.io.js' , function() {
		
		// connect
		var socket = io.connect('/');	
		
		socket.on('connect', function () {
			console.log("client connected. Sending cur slide request");
			
	
			// on connect send presentation request
			socket.emit('request_presentation', {'id': presentation_id} );
		
			// init data
			socket.on('initdata', function(data) {
				console.log("Init data: " + JSON.stringify(data) );
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
			socket.on('updatedata', function(data) {
				console.log("Receive update data: " + JSON.stringify(data) );
				
				if(data.id == presentation_id)
				{
					if(data['cmd']){
						if(data.cmd=="prev") Reveal.prev();
						else Reveal.next();
					}else Reveal.slide(data.indexh,data.indexv,data.frame);
				}
			});
			
		
		});
		
	});	
</script>
	
	
	</body>
</html>

